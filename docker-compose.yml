volumes:
  pgdata:
  minio_data:
  pgadmin:

services:
  frontend:
    build:
      context: ./frontend
    container_name: mems-frontend
    env_file:
      - .env-non-dev
    ports:
      - 3000:3000
    volumes:
      - ./frontend/public:/app/public
      - ./frontend/src:/app/src

  db:
    image: postgres:15
    container_name: db_mems
    env_file:
      - .env-non-dev
    volumes:
      - pgdata:/var/lib/postgresql/data/

  api:
    build:
      context: ./api
    env_file:
      - .env-non-dev
    container_name: mems-api
    ports:
      - 8000:8000
    volumes:
      - ./api:/api
    restart: always
    depends_on:
      - db
      - s3_storage
      - frontend
      - redis
      - pgadmin
    command: gunicorn app.main:app --workers 4 --worker-class uvicorn.workers.UvicornWorker --bind=0.0.0.0:8000 --reload

  s3_storage:
    build:
      context: ./storage
    env_file:
      - .env-non-dev
    container_name: s3-storage-api
    ports:
      - 8888:8888
    restart: always
    volumes:
      - ./storage/app:/storage/app
    depends_on:
      - minio
    command: gunicorn app.main:app --workers 4 --worker-class uvicorn.workers.UvicornWorker --bind=0.0.0.0:8888 --reload

  minio:
    container_name: minio
    image: minio/minio
    env_file:
      - .env-non-dev
    command: server /data --console-address ":9001"
    ports:
      - 9000:9000
      - 9001:9001
    volumes:
      - minio_data:/data

  redis:
    image: redis
    expose:
      - 6379

  pgadmin:
    image: elestio/pgadmin:latest
    restart: always
    env_file:
      - .env-non-dev
    ports:
      - 8080:8080
    volumes:
      - ./servers.json:/pgadmin4/servers.json
    depends_on:
      - db
